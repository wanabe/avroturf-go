// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wanabe/avroturf-go/avroturf (interfaces: SchemaRegistryInterface)

// Package mock_avroturf is a generated GoMock package.
package mock_avroturf

import (
	gomock "github.com/golang/mock/gomock"
	avro "github.com/hamba/avro"
	reflect "reflect"
)

// MockSchemaRegistryInterface is a mock of SchemaRegistryInterface interface
type MockSchemaRegistryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegistryInterfaceMockRecorder
}

// MockSchemaRegistryInterfaceMockRecorder is the mock recorder for MockSchemaRegistryInterface
type MockSchemaRegistryInterfaceMockRecorder struct {
	mock *MockSchemaRegistryInterface
}

// NewMockSchemaRegistryInterface creates a new mock instance
func NewMockSchemaRegistryInterface(ctrl *gomock.Controller) *MockSchemaRegistryInterface {
	mock := &MockSchemaRegistryInterface{ctrl: ctrl}
	mock.recorder = &MockSchemaRegistryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemaRegistryInterface) EXPECT() *MockSchemaRegistryInterfaceMockRecorder {
	return m.recorder
}

// FetchSchema mocks base method
func (m *MockSchemaRegistryInterface) FetchSchema(arg0 uint32) (avro.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchema", arg0)
	ret0, _ := ret[0].(avro.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchema indicates an expected call of FetchSchema
func (mr *MockSchemaRegistryInterfaceMockRecorder) FetchSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchema", reflect.TypeOf((*MockSchemaRegistryInterface)(nil).FetchSchema), arg0)
}
