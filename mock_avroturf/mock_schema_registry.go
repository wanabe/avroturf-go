// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wanabe/avroturf-go (interfaces: SchemaRegistry)

// Package mock_avroturf is a generated GoMock package.
package mock_avroturf

import (
	gomock "github.com/golang/mock/gomock"
	avro "github.com/hamba/avro"
	reflect "reflect"
)

// MockSchemaRegistry is a mock of SchemaRegistry interface
type MockSchemaRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaRegistryMockRecorder
}

// MockSchemaRegistryMockRecorder is the mock recorder for MockSchemaRegistry
type MockSchemaRegistryMockRecorder struct {
	mock *MockSchemaRegistry
}

// NewMockSchemaRegistry creates a new mock instance
func NewMockSchemaRegistry(ctrl *gomock.Controller) *MockSchemaRegistry {
	mock := &MockSchemaRegistry{ctrl: ctrl}
	mock.recorder = &MockSchemaRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemaRegistry) EXPECT() *MockSchemaRegistryMockRecorder {
	return m.recorder
}

// FetchSchema mocks base method
func (m *MockSchemaRegistry) FetchSchema(arg0 uint32) (avro.Schema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchema", arg0)
	ret0, _ := ret[0].(avro.Schema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchema indicates an expected call of FetchSchema
func (mr *MockSchemaRegistryMockRecorder) FetchSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchema", reflect.TypeOf((*MockSchemaRegistry)(nil).FetchSchema), arg0)
}

// Register mocks base method
func (m *MockSchemaRegistry) Register(arg0 string, arg1 avro.Schema) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockSchemaRegistryMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSchemaRegistry)(nil).Register), arg0, arg1)
}
